// Copyright (c) 2014 Ashley Jeffs
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package tunny
//------------------------------------------------------------------------------

// workRequest is a struct containing context representing a workers intention
// to receive a work payload.
// workerÂàõÂª∫ËØ∑Ê±Ç‰πãÂêé‰∏¢Âà∞reqChan,ËØ∑Ê±ÇÊ±†Â≠êË∞ÉÁî®
type workRequest struct {
	// jobChan is used to send the payload to this worker.
	//Â∞Ü‰ªªÂä°ÂèëÈÄÅÁªôÂΩìÂâçÊâÄÂú®worker(workRequestÂåÖÂê´Âú®work‰∏≠)
	jobChan chan<- interface{}

	// retChan is used to read the result from this worker.  
	// Â∞ÜworkerÊâßË°åÁªìÊûú‰ªéËøô‰∏™chanÂèñÂá∫
	retChan <-chan interface{}

	// interruptFunc can be called to cancel a running job. When called it is no
	// longer necessary to read from retChan.
	// ÊîæÂºÉ‰ªªÂä°
	interruptFunc func()
}

//------------------------------------------------------------------------------
//WorkerRapperËé∑Âèñ‰∏Ä‰∏™WorkerÂÆûÁé∞Âπ∂Â∞ÜÂÖ∂ÂåÖË£ÖÂú®goroutine‰∏≠
//‰ª•ÂèäÈÄöÈÅìÂ∏ÉÁΩÆ„ÄÇÂ∑•‰Ωú‰∫∫ÂëòË¥üË¥£ÁÆ°ÁêÜÂ∑•‰Ωú
//Â∑•‰∫∫ÂíågoroutineÁöÑ‰∏ÄÁîü„ÄÇ
// workerWrapper takes a Worker implementation and wraps it within a goroutine
// and channel arrangement. The workerWrapper is responsible for managing the
// lifetime of both the Worker and the goroutine.
type workerWrapper struct {
	worker        Worker
	interruptChan chan struct{}

	// reqChan is NOT owned by this type, it is used to send requests for work.
	reqChan chan<- workRequest

	// closeChan can be closed in order to cleanly shutdown this worker.
	closeChan chan struct{}

	// closedChan is closed by the run() goroutine when it exits.
	closedChan chan struct{}
}

// ÊûÑÈÄ†ÂáΩÊï∞,ÂàõÂª∫workerWrapper
// Ë∞ÉÁî®newWorkerWrapper Â∞±‰ºöË∞ÉÁî®w.run(),wokerÂºÄÂßãÂ∑•‰Ωú,Á≠âÂà∞Ë∞ÉÁî®pool.Process‰º†ÈÄí‰ªªÂä°
func newWorkerWrapper(
	reqChan chan<- workRequest,
	worker Worker, //closureWorker{}
) *workerWrapper {
	// wrapÂêéÁöÑÂ§ö‰∫ÜÂá†‰∏™chan
	w := workerWrapper{
		worker:        worker,   //workerÊòØp.ctor(),ÊòØ&closureWorker{processor: f,},fÊòØ‰ªªÂä°ÂáΩÊï∞üòà
		interruptChan: make(chan struct{}),  //ÂàùÂßãÂåñ‰∫ÜüòØ
		reqChan:       reqChan,//ËøôÊòØ‰∏Ä‰∏™Á©∫chanelÁ±ªÂûãÊòØworkRequest,poolÂàùÂßãÂåñÂÆö‰πâÁöÑ
		closeChan:     make(chan struct{}),
		closedChan:    make(chan struct{}),
	}

	go w.run()

	return &w
}

//------------------------------------------------------------------------------

func (w *workerWrapper) interrupt() {
	close(w.interruptChan)
	w.worker.Interrupt()   //Êé•Âè£,Ê≤°ÊúâÂÆûÁé∞
}

func (w *workerWrapper) run() {
	jobChan, retChan := make(chan interface{}), make(chan interface{})
	defer func() {
		w.worker.Terminate()//ËøôÂ∫îËØ•Ë¶ÅÂºÄÂèëËá™Â∑±ÂÆûÁé∞ÂÜçË∞ÉÁî®,Ê≤°ÊúâÂÆûÁé∞
		close(retChan)
		close(w.closedChan)
	}()

	for {
		// NOTE: Blocking here will prevent the worker from closing down.
		w.worker.BlockUntilReady()  //Êé•Âè£ÊãìÂ±ïÊñπÊ≥ï,Ê≤°ÊúâÂÆûÁé∞
		select {
			// ÂæÄreqchan‰∏≠‰º†ÈÄíworkRequestÂÆû‰æã,Á≠âÂæÖprocessÂáΩÊï∞Êé•Êî∂Ë∞ÉÁî®
			// pool.close Âêé,ËøôÈáåÊâßË°å‰ºöÂ§±Ë¥•,‰ºöÊâßË°å‰∏ã‰∏Ä‰∏™case
			// ÊØè‰∏™workerÊâßË°åÂÆå‰ªªÂä°,ËøõÂÖ•ËøôÈáåËøõÂÖ•ÂáÜÂ§áÊâßË°å‰ªªÂä°Áä∂ÊÄÅ
		case w.reqChan <- workRequest{
			jobChan:       jobChan,
			retChan:       retChan,
			interruptFunc: w.interrupt, //ÂÖ≥Èó≠interruptChan,Êö¥Èú≤Áªôtunny.go‰∏≠Ë∞ÉÁî®
		}:
			select {
				// ‚≠êÔ∏è Á®ãÂ∫èÂêØÂä®Êó∂,ÂàõÂª∫pool,w.runÂêØÂä®ÁöÑgoruntime‰ºöÈòªÂ°ûÂú®ËøôÈáå,Á≠âÂæÖjobchan(Êó†ÁºìÂÜ≤ÁöÑchanÈÉΩ‰ºöÈòªÂ°û)
				// jobchan‰∏≠Âèñ‰ªªÂä°ÂáΩÊï∞ÂèÇÊï∞,tunny.go 171Ë°å‰º†ÈÄí     ÈòªÂ°û üöΩ
			case payload := <-jobChan: //workerÁ≠âÂæÖÊâßË°å‰ªªÂä°ÂèÇÊï∞
				// closureWorkerÁöÑProcessÊñπÊ≥ïÂÆûÁé∞
				// func (w *closureWorker) Process(payload interface{}) interface{} {
				// 	return w.processor(payload)  Âú®ËøôÈáåË∞ÉÁî®Áî®Êà∑ÂÆö‰πâÁöÑfunc,payloadÊòØÂèÇÊï∞
				// }
				result := w.worker.Process(payload)  
				select {
				case retChan <- result:   //Â∞ÜÁªìÊûú‰∏¢Áªôresultchan,tunny.go 173Ë°åËß£Èô§ÈòªÂ°û  üöΩ
				////Ëß£ÂÜ≥Ë∂ÖÊó∂‰∫Ü,case retChan <- result‰∏ÄÁõ¥Á≠âÂæÖ
				case <-w.interruptChan:  //w.interruptChan ÊòØÁ©∫channel.‰ªªÂä°ËÆæÁΩÆË∂ÖÊó∂Âêé,‰ºörequest.interruptFunc(),closeÊéâËØ•channel,Ë∂ÖÊó∂Êó∂‰ºöÊâßË°å
					w.interruptChan = make(chan struct{})  //ÈáçÊñ∞ËµãÂÄº,Êàê‰∏∫‰∏Ä‰∏™Êñ∞ÁöÑÂáÜÂ§áworker
				}
				//////Ëß£ÂÜ≥ËÆæÁΩÆË∂ÖÊó∂Ëß¶Âèë‰∫Ü,case payload := <-jobChan:‰∏ÄÁõ¥Á≠âÂæÖ
			case <-w.interruptChan:
				w.interruptChan = make(chan struct{})  ////ÈáçÊñ∞ËµãÂÄº,Êàê‰∏∫‰∏Ä‰∏™Êñ∞ÁöÑÂáÜÂ§áworker
			}
			//Ê≠§Â§ÑË∞ÉÁî®wÁöÑcloseÊñπÊ≥ï,ËÆ©‰ªªÂä°ÁªìÊùü
			// ÂÖ≥Èó≠ÁöÑchannel‰∏çËÉΩÂÜôÊï∞ÊçÆ,‰ΩÜÊòØÂèØ‰ª•‰ªéÈáåÂèñÊï∞ÊçÆ,Â¶ÇÊûúÂÖ∂‰∏≠Ê≤°Êï∞ÊçÆ‰ºö‰∏ÄÁõ¥ÂèñÂà∞0üëª
		case <-w.closeChan:
			return //Êê∫Á®ãÁªìÊùü
		}
	}
}

//------------------------------------------------------------------------------

func (w *workerWrapper) stop() {
	close(w.closeChan)
}

func (w *workerWrapper) join() {	// Á≠âÂæÖclose(w.closeChan)Âêé,w.runÂáΩÊï∞ÁªìÊùüÊúÄÂêé‰ºöÊâßË°å
	<-w.closedChan   // ‰∏é‰∏äÈù¢ÁöÑw.closeChan‰∏çÂêå; Â¶ÇÊûúw.closedChanÊ≤°ÂÖ≥Èó≠‰ºöÈòªÂ°ûÂú®ËøôÈáå
}

//------------------------------------------------------------------------------
